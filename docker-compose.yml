version: '3.8'

services:
  # Angular Frontend (Development - Default)
  frontend:
    build:
      context: ./doc-insight-portal
      dockerfile: Dockerfile.dev
    ports:
      - "4200:4200"
    depends_on:
      - api-backend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - API_URL=${API_URL:-http://api-backend:3000/api}
      - AUTH_URL=${AUTH_URL:-http://api-backend:3000/api/auth}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4200}
      - RAG_SERVICE_URL=${RAG_SERVICE_URL:-http://rag-service:8000}
      - APP_NAME=${APP_NAME:-Doc Insight Portal}
      - APP_VERSION=${APP_VERSION:-1.0.0}
    volumes:
      - /app/node_modules
      - /app/dist
    networks:
      - doc-insight-network
    restart: unless-stopped

  # Angular Frontend (Production)
  frontend-prod:
    build:
      context: ./doc-insight-portal
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api-backend
    environment:
      - NODE_ENV=production
      - API_URL=${API_URL:-http://api-backend:3000/api}
      - AUTH_URL=${AUTH_URL:-http://api-backend:3000/api/auth}
      - FRONTEND_URL=${FRONTEND_URL:-https://doc-insight.com}
      - RAG_SERVICE_URL=${RAG_SERVICE_URL:-http://rag-service:8000}
      - APP_NAME=${APP_NAME:-Doc Insight Portal}
      - APP_VERSION=${APP_VERSION:-1.0.0}
    networks:
      - doc-insight-network
    restart: unless-stopped
    profiles:
      - prod

  # Node.js Backend (API - Development - Default)
  api-backend:
    build:
      context: ./doc-insight-api
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-3000}
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production-make-it-long-and-random
      - JWT_REFRESH_SECRET=your-refresh-secret-key-change-in-production
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-doc_insight}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password_1234}
      - DB_SSL=${DB_SSL:-false}
      - USE_MOCK_INGESTION=${USE_MOCK_INGESTION:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:4200}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - /app/node_modules
      - /app/dist
    networks:
      - doc-insight-network
    restart: unless-stopped

  # Node.js Backend (API) - Production
  api-backend-prod:
    build:
      context: ./doc-insight-api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=${API_PORT:-3000}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-doc_insight}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL:-false}
      - USE_MOCK_INGESTION=${USE_MOCK_INGESTION:-false}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://doc-insight.com}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - doc-insight-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    profiles:
      - prod

  # PostgreSQL Database (Development - Default)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password_1234}
      - POSTGRES_DB=${DB_NAME:-doc_insight}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - doc-insight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-doc_insight}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test PostgreSQL
  test-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=doc_insight_test
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - test-network
    profiles:
      - test

  # Frontend Tests
  frontend-test:
    build:
      context: ./doc-insight-portal
      dockerfile: Dockerfile.test
    environment:
      - NODE_ENV=test
    command: npm test
    volumes:
      - /app/node_modules
    networks:
      - test-network
    profiles:
      - test

  # Backend Tests
  backend-test:
    build:
      context: ./doc-insight-api
      dockerfile: Dockerfile.test
    environment:
      - NODE_ENV=test
      - PORT=3001
      - JWT_SECRET=test-jwt-secret
      - DB_HOST=test-postgres
      - DB_PORT=5432
      - DB_NAME=doc_insight_test
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL=false
      - USE_MOCK_INGESTION=true
    depends_on:
      - test-postgres
    volumes:
      - /app/node_modules
    command: npm test
    networks:
      - test-network
    profiles:
      - test

  # Nginx Reverse Proxy (Production only)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./doc-insight-portal/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./doc-insight-portal/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend-prod
      - api-backend-prod
    networks:
      - doc-insight-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - prod

volumes:
  postgres_data:
    driver: local
  test_postgres_data:

networks:
  doc-insight-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: doc-insight-br0
  test-network:
    driver: bridge